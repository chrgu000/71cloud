<?php
/**
 * Created by PhpStorm.
 * User: lwen_phper@163.com
 * Date: 2018/8/14
 * Time: 9:42
 *
 * 用户模型
 *
 */

namespace app\home\model;

use think\Model;

class User extends Model
{
    /**
     *
     * 个人积分排行
     *
     * @param $uid  int 用户id
     * @param $time string 年月
     * @param $type int 类型 1月度排名  2年度排名
     *
     */
    public function getUserRank($time = null, $type, $uid)
    {

        //日期筛选
        if ($time == null || $type == 2) {
            //$type==2 供app接口使用 获取本年排行
            if ($type == 1) {
                //本月排行
                $start = mktime(0, 0, 0, date('m'), 1, date('Y')); //本月开始
                $end   = mktime(23, 59, 59, date('m'), date('t'), date('Y')); //本月结束

            } else {
                //本年排行
                $start = strtotime(date("Y", time()) . "-1" . "-1"); //本年开始
                $end   = strtotime(date("Y", time()) . "-12" . "-31"); //本年结束
            }
        } else {
            $time  = explode('-', $time);
            $year  = $time[0];
            $month = $time[1];

            $start = mktime(0, 0, 0, date($month), 1, date($year));
            $end   = mktime(23, 59, 59, date($month), date('t'), date($year));
        }

        //积分
//        $map['b.ctime'] = ['between', "$start,$end"];

//        $data = User::alias('a')
//            ->field('a.id,a.username,a.face,a.company,GROUP_CONCAT(b.score)')
//            ->join(' c_user_score  b','a.id = b.uid','LEFT')
//            ->where($map)
//            ->group('a.id')
//            ->select();
        $sql = "select a.id,a.username,a.face,a.company,GROUP_CONCAT(b.score) as score from c_user as a left join c_user_score as b on a.id = b.uid where 'b.ctime' between $start and $end group by a.id";
//        dump(User::query($sql));
//        dump(User::getLastSql());
//        die();
        //统计总分
        foreach ($data as &$v) {
            $v['score']       = explode(',', $v['score']);
            $v['total_score'] = array_sum($v['score']);
            unset($v['score']);
            //当前用户信息
            if ($v['id'] == $uid) {
                $user = $v;
            }
        }

        //按照总分排序
        array_multisort(array_column($data, 'total_score'), SORT_DESC, $data);

        //个人信息 总分 排名
        if (empty($user)) {
            //当前用户没有积分
            $user                = M('User')->field('id,username,face,company')->where('id=' . $uid)->find();
            $user['total_score'] = 0;
            $user['rank']        = 0;
        } else {
            //寻找当前用户的键名
            $uid_key      = array_search($uid, array_column($data, 'id'));
            $user         = $data[$uid_key];
            $user['rank'] = $uid_key + 1;
        }

        return ['user' => $user, 'data' => $data];
    }

    /**
     *
     * 单位排行榜
     *
     * @param $uid  int 用户id
     * @param $time string 年月
     * @param $type int 类型 1本月度排名  2本年度排名
     *
     */
    public function getCompanyRank($time = null, $type, $uid)
    {

        if ($time == null || $type == 2) {//$type==2 供app接口使用 获取本年排行
            //本月 本年度排名
            if ($type == 1) {
                //本月排行
                $start = mktime(0, 0, 0, date('m'), 1, date('Y')); //本月开始
                $end   = mktime(23, 59, 59, date('m'), date('t'), date('Y')); //本月结束
            } else {
                //本年排行
                $start = strtotime(date("Y", time()) . "-1" . "-1"); //本年开始
                $end   = strtotime(date("Y", time()) . "-12" . "-31"); //本年结束
            }
        } else {
            //日期筛选
            $time  = explode('-', $time);
            $year  = $time[0];
            $month = $time[1];

            $start = mktime(0, 0, 0, date($month), 1, date($year));
            $end   = mktime(23, 59, 59, date($month), date('t'), date($year));
        }

        //积分
        $map['b.ctime'] = ['between', "$start,$end"];

        //统计公司总人数
        $data = $this->field('GROUP_CONCAT(id) as uid,company')->group('company')->select();

        //统计公司总分数
        $data1 = $this->alias('a')
            ->field('a.company,GROUP_CONCAT(b.score) as score')
            ->join('LEFT JOIN p_user_score as b on a.id = b.uid')
            ->where($map)
            ->group('a.company')
            ->select();

        foreach ($data as $k => &$v) {
            $v['total_score'] = 0;//初始化
            $v['avg_score']   = 0;//初始化
            $v['user_num']    = count(explode(',', $v['uid']));//公司总人数
            foreach ($data1 as $key => $value) {
                if ($v['company'] == $value['company']) {

                    $v['total_score'] = array_sum(explode(',', $value['score'])); //公司总积分
                    $v['avg_score']   = round($v['total_score'] / $v['user_num'], 2); //公司平均积分  总分/公司总人数
                }
            }

            if ($v['company'] === '') {
                unset($data[$k]);
            }//删除没有填写公司名的用户
            unset($data[$k]['uid']);
        }

        //按照总分排序
        array_multisort(array_column($data, 'avg_score'), SORT_DESC, $data);

        //当前用户所属公司排名
        $user = $this->field('username,face,company')->where('id=' . $uid)->find();
        //寻找当前用户的键名
        $uid_key = array_search($user['company'], array_column($data, 'company'));

        if ($uid_key === false) {
            $user['avg_score'] = 0;
            $user['rank']      = 0;
        } else {
            $user['avg_score'] = $data[$uid_key]['avg_score'];
            $user['rank']      = $uid_key + 1;
        }

        return ['user' => $user, 'data' => $data];
    }

}